name: get_token_step_by_step
permissions:
  contents: write
  pull-requests: read
on:
  push:
    branches:
      - main

jobs:
  get_token_step_by_step:
    runs-on: ubuntu-latest
    steps:
    # Step 1: Set up Python 3
    - name: Set up Python 3
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    # Step 2: Install Git
    - name: Install Git
      run: sudo apt-get update && sudo apt-get install -y git
    - name: Checkout repo
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        repository: ${{ github.repository }}
        path: cac-content
    - name: Get the commit message and PR number
      run: |
        cd cac-content
        # Get the latest commit message (e.g., "Merge pull request #123 from branch-name")
        COMMIT_MSG=$(git log -1 --pretty=%B)
        echo "Latest commit message: $COMMIT_MSG"

        # Extract the PR number from the commit message (if it's a merge commit)
        PR_NUMBER=$(echo "$COMMIT_MSG" | grep -oP '#\K\d+')
        echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV

        if [ -n "$PR_NUMBER" ]; then
          echo "Found PR number: $PR_NUMBER"
          echo "SKIP=false" >> $GITHUB_ENV
          
          # Optionally, get more details about the PR using GitHub API
          PR_INFO=$(curl -s "https://api.github.com/repos/${{ github.repository }}/pulls/${PR_NUMBER}")
          
          # Extract PR title from the response
          PR_TITLE=$(echo "$PR_INFO" | jq -r .title)
          echo "PR Title: $PR_TITLE"
          if [[ "$PR_TITLE" == *"Auto-generated PR from OSCAL content"* ]]; then
            echo "The PR comes from OSCAL content. The task of Sync CaC content to OSCAL will exit."
            echo "Skipping further checks."
            echo "SKIP=true" >> $GITHUB_ENV
          fi
        fi
    - name: Get GitHub app token
      if: ${{ env.SKIP == 'false' }}
      uses: actions/create-github-app-token@df432ceedc7162793a195dd1713ff69aefc7379e # v2.0.6
      id: app-token
      with:
        app-id: ${{ secrets.APP_ID }}
        private-key: ${{ secrets.PRIVATE_KEY }}
    - name: Get GitHub app token
      if: ${{ env.SKIP == 'false' }}
      run: |
        echo ${{ env.PR_NUMBER }}
    # Step 5: Detect the updates of CAC content
    - name: Detect files changed by PR
      if: ${{ env.SKIP == 'false' }}
      id: changed-files
      run: |
        repo=${{ github.repository }}
        # Fetch all pages of the files for the pull request
        url="repos/$repo/pulls/${{ env.PR_NUMBER }}/files"
        response=$(gh api "$url" --paginate)
        echo "$response" | jq -r '.[].filename' > filenames.txt
        echo "CHANGE_FOUND=false" >> $GITHUB_ENV
        if grep -E "controls/|.profile|rule.yml|.var" filenames.txt ; then
          echo "CHANGE_FOUND=true" >> $GITHUB_ENV
        fi
        cat filenames.txt
      env:
        GH_TOKEN: ${{ steps.app-token.outputs.token }}
    # Step 6: Setup the trestle bot environment
    - name: Checkout OSCAL content repo
      if: ${{ env.CHANGE_FOUND == 'ture' }}
      run: |
        echo "sucessful....."
    # Step 7: Check the details of the updated rule and var files
    - name: Check the deetails of the rule and var files changed by PR
      if: ${{ env.SKIP == 'false' }}
      id: changed-files
      run: |
        repo=${{ github.repository }}
        # Fetch all pages of the files for the pull request
        url="repos/$repo/pulls/${{ env.PR_NUMBER }}/files"
        response=$(gh api "$url" --paginate)
        echo "$response" | jq -r '.[].filename' > filenames.txt
        echo "CHANGE_FOUND=false" >> $GITHUB_ENV
        while IFS= read -r line; do
          if echo "$file" | grep -qE "controls/|\.profile"; then
            echo "CHANGE_FOUND=true" >> $GITHUB_ENV
            echo "The change_found for finding controls and profiles: ${{ env.CHANGE_FOUND}}"
          if
          if echo "$file" | grep -qE "rule.yml|.var"; then
            # Fetch the diff for the file using its SHA (commit hash)
            file_sha=$(gh api "$url" | jq -r --arg file "$file" '.[] | select(.filename == $file) | .sha')
            diff=$(gh api "repos/$repo/commits/$file_sha" | jq -r '.files[0].patch')

            # Optionally, you can echo the diff for debugging
            echo "Diff for $file:"
            #echo "$diff"
          fi
        done < filenames.txt
        cat filenames.txt

  # Optionally, print the filenames of the files changed
  echo "$changed_files"
      env:
        GH_TOKEN: ${{ steps.app-token.outputs.token }}