name: Sync CaC content to OSCAL
permissions:
  contents: write
  pull-requests: read
on:
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  
  check-token:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Set up Python 3
      - name: Set up Python 3
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          pip install pyjwt cryptography
      # Step 2: Install Git
      - name: Install Git
        run: sudo apt-get update && sudo apt-get install -y git
      # Step 4: Get the access token for content write permission to OSCAL content
      # 1. Generate the JWT token
      # 2. Generate the installation ID(It's pre-generated)
      # 3. Generate the installation access token
      - name: Generate JWT Token
        id: generate-jwt
        run: |
          # Generate JWT using Ruby
          JWT=$(ruby -r jwt -e '
            payload = {
              iat: Time.now.to_i,
              exp: Time.now.to_i + (10 * 60), # Expires in 10 mins
              iss: ENV["APP_ID"]
            }
            private_key = OpenSSL::PKey::RSA.new(ENV["PRIVATE_KEY"])
            token = JWT.encode(payload, private_key, "RS256")
            puts token
          ')
          echo "JWT_TOKEN=$JWT" >> $GITHUB_ENV
          echo "::add-mask::$JWT" # Mask the token in logs
        env:
          APP_ID: ${{ secrets.APP_ID }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
      # Generate the GitHub app installation access token which expires in 1 hour
      - name: Get Installation Access Token
        id: get-installation-token
        run: |
          INSTALLATION_TOKEN=$(curl -s -X POST \
            -H "Authorization: Bearer ${{ env.JWT_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/app/installations/${{ secrets.INSTALLATION_ID }}/access_tokens \
            | jq -r '.token')
          echo "INSTALLATION_TOKEN=$INSTALLATION_TOKEN" >> $GITHUB_ENV
          echo "::add-mask::$INSTALLATION_TOKEN" # Mask the token in logs
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      # Step 5: Detect the updates of CAC content
      - name: Detect the changed files of the PR
        id: changed-files
        run: |
          pr_number=${{ github.event.pull_request.number }}
          repo=${{ github.repository }}
          # Function to fetch all pages
          url="repos/$repo/pulls/$pr_number/files"
          response=$(gh api "$url" --paginate)
          echo "$response" | jq -r '.[].filename' > filenames.txt

          echo "CHANGE_FOUND=false" >> $GITHUB_ENV
          if grep -E "controls/|.profile|rule.yml|.var" filenames.txt ; then
            echo "CHANGE_FOUND=true" >> $GITHUB_ENV
          fi
          cat filenames.txt
        env:
          GH_TOKEN: ${{ env.INSTALLATION_TOKEN }}
      - name: Set RH_PRODUCTS
        if: ${{ env.CHANGE_FOUND == 'true' }}
        run: |
          echo "RH_PRODUCTS=(rhel8 rhel9 rhel10 ocp4)" >> $GITHUB_ENV
      - name: Print RH_PRODUCTS
        if: ${{ env.CHANGE_FOUND == 'true' }}
        run: |
          RH_PRODUCTS=${{ env.RH_PRODUCTS }}
          echo ${RH_PRODUCTS[@]}
          for product in "${RH_PRODUCTS[@]}"; do
            echo $product
          done
      - name: Handle detected updates
        run: |
          python util/handle_detected_updates.py 'util/input.txt' > updates 2>&1
          RH_PRODUCTS=${{ env.RH_PRODUCTS }}
          i=0
          while IFS= read -r line; do
              i=$((i + 1))
              if [[ $i -eq 1 ]]; then
                echo $line > updated_controls  
              elif [[ $i -eq 2 ]]; then
                profiles=($(echo "$line"| sed "s/{'/{\"/g; s/': '/\":\"/g; s/', '/\",\"/g; s/'}/\"}/g;"))
                for profile in "${profiles[@]}"; do
                  product=$(echo "$profile" | jq -r '.product')
                  profile_name=$(echo "$profile" | jq -r '.profile_name')
                  echo $profile_name >> $product"_updated_profiles"
                done
              elif [[ $i -eq 3 ]]; then
                rules=($line)
                for rule in "${rules[@]}"; do
                  echo "get the $rule impacted controls"
                  #python scripts/get_rule_impacted_files.py $RH_PRODUCTS "$GITHUB_WORKSPACE/cac-content" $value control >> rule_impacted_controls 2>&1 
                  for product in "${RH_PRODUCTS[@]}"; do
                    #python scripts/get_rule_impacted_files.py $product "$GITHUB_WORKSPACE/cac-content" $value profile >> $product"_rule_impacted_profiles" 2>&1
                    echo "get the $rule impacted profiles: $product"
                  done
                done
              fi
          done < updates
